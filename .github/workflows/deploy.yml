name: Deployments

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: environment
        required: true
jobs:
  perpare-deployment:
    environment: ${{ inputs.environment }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Prepare parameters 
        id: prepare_parameters
        run: |
          BASE=$(node -p "require('./packages/starknet-snap/package.json').version")
          HASH=$(git rev-parse --short HEAD)
          DATE=$(date +%Y%m%d)
          ENV=${{ inputs.environment }}
          if [[ $ENV == "dev" ]]; then
            {
              echo "VERSION=${BASE}-dev-${HASH}-${DATE}"
              echo "TAG=dev"
              echo "ENV=dev"
            } >> "$GITHUB_OUTPUT"
          elif [[ $ENV  == "staging" ]]; then
            {
              echo "VERSION=${BASE}-staging"
              echo "TAG=staging"
              echo "ENV=staging"
            } >> "$GITHUB_OUTPUT"
          elif [[ $ENV  == "production" ]]; then
            {
              echo "VERSION=${BASE}"
              echo "TAG=latest"
              echo "ENV=prod"
            } >> "$GITHUB_OUTPUT"
          else
            echo "Invalid environment"
            exit 1
          fi
    outputs:
      VERSION: ${{ steps.prepare_parameters.outputs.VERSION }}
      TAG: ${{ steps.prepare_parameters.outputs.TAG }}
      ENV: ${{ steps.prepare_parameters.outputs.ENV }}
      AWS_CLOUDFRONT_DISTRIBUTIONS_ID: ${{ vars.AWS_CLOUDFRONT_DISTRIBUTIONS_ID }}
      AWS_S3_URL: ${{ vars.AWS_S3_URL }}

  install-build:
    needs: 
      - perpare-deployment
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '20.x'
      - name: Install
        run: |
          yarn install --no-immutable
      - name: Build Snap
        run: |
          PRE_VERSION="$VERSION"

          npm --prefix ./packages/starknet-snap version --new-version "$PRE_VERSION" --no-git-tag-version --allow-same-version

          yarn workspace @consensys/starknet-snap build

          BUILD_VERSION=$(node -p "require('./packages/starknet-snap/package.json').version")
          
          if [[ "$PRE_VERSION" != "$BUILD_VERSION" ]]; then
            echo "Version mismatch"
            exit 1
          fi
        env:
          SNAP_ENV: ${{ needs.perpare-deployment.outputs.ENV }}
          VERSION: ${{ needs.perpare-deployment.outputs.VERSION }}
          VOYAGER_API_KEY: ${{ secrets.VOYAGER_API_KEY }}
          ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
      - name: Build UI
        run: |
          REACT_APP_SNAP_VERSION="$VERSION" yarn workspace wallet-ui build 
        env:
          VERSION: ${{ needs.perpare-deployment.outputs.VERSION }}
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: |
            ./packages/wallet-ui/build/*
            ./packages/starknet-snap/dist/bundle.js
            ./packages/starknet-snap/snap.manifest.json
            ./node_modules/.yarn-state.yml
          key: ${{ github.sha }}

  deploy-snap:
    needs: 
      - perpare-deployment
      - install-build
    name: Deploy Snap
    permissions:
      contents: write
    uses: ./.github/workflows/publish-release.yml
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      TAG: ${{ needs.perpare-deployment.outputs.TAG }}

  deploy-dapp:
    needs: 
      - perpare-deployment
      - deploy-snap
    name: Deploy Dapp
    permissions:
      contents: write
    uses: ./.github/workflows/publish-dapp.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_CLOUDFRONT_DISTRIBUTIONS_ID: ${{ needs.perpare-deployment.outputs.AWS_CLOUDFRONT_DISTRIBUTIONS_ID }}
      AWS_S3_URL: ${{ needs.perpare-deployment.outputs.AWS_S3_URL }}
